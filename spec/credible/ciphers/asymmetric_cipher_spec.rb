require 'spec_helper'

require 'credible/ciphers/asymmetric_cipher'

describe Credible::Ciphers::AsymmetricCipher do
  subject { Credible::Ciphers::AsymmetricCipher }
  let(:str) { 'this is mah string' }
  let(:pub_key) { open(RSpec.root.join('fixtures', 'rsa_pub.pem')).read }
  let(:priv_key) { open(RSpec.root.join('fixtures', 'rsa.pem')).read }

  # unfortunately for testing, I can't figure out how to stub out the padding
  # mechanism to something deterministic. Perhaps that's not the worst thing
  # in the world. As a result, I can't make any reasoned assertions about
  # the encrypted blob other than 1) it decrypts correctly and 2) it's
  # charlength is the same as when I manually encrypted the same plaintext
  describe 'round-trip encryption' do
    it 'works' do
      subject.decrypt(subject.encrypt(str, pub_key), priv_key).should == str
    end
    it 'encrypts to the appropriate size' do
      subject.encrypt(str, pub_key).size.should == ciphertext.size
    end
  end

  describe '.decrypt' do
    it 'decrypts' do
      subject.decrypt(ciphertext, priv_key).should == str
    end
  end

  let(:ciphertext) { "\xD6\x96\x95\xBD,\x91\xE0[\xAAG\x91\xD9K\xD9\xA1\xCF>\xEB\xDD\x1C\xF2\xBF\x05\xC3\xCA\xB9\xDA\x7F3\xCA64B\xEC\x90\a\xA2'\xDB\x80\x88\xF4$/}b\xD5\xAD\x8Cb\xD5\xBB\x8C\xC5\x15\xAE\x1E-\xC9\xFAr\x85\xC2\xBE\xB8l\xDBd\xEA\xEF\xC8\xA6\x00\vZ\xB7\x19\t\x0E\xEB\xB786\x8A\x03\xD0&\xAE\xBA\xFD\xF3\xCA/~\xBB.\xF3\x169Gl\xDB\xC9\x19&\xAE\xD7\x94\x946b\xD2\x11\xEE\x83\x1D\xE8i\xA4\xF2\xEE\xF7\x1E2\xCC\xF2gI\xA5bi\xF3V\x8F\xB5\xA0\x88\xE2\xD5(\x8F\x1E{t\xDB\x196\xAD\xB6\xC3<\xA9\xB4\xE1\x90X?\x1A\xBA?#\a\xD4\xEF\xF4tvs\t\xF8\x87\xB7\x02\xAA\xA0R\x01\e\xFA\x1D\\\x9C\xBE\x04\x84\xDAgrW\x82\x8A\x86\xFF\x03V\x02\xBD\xAE\x16e\xE4\x18\xC3\x91\xEC\xFE\x1A\x00~}$\x86\xDB\xB8\xE5\xAA\x16\x1E\xB9\xBD\xAEh\xAC\xB0\xD9;\xE1.@\x8Fri\xC3\xA93\xB6E!\xCE\x8A8\x0FUi 7\t\x91\x0F\x9B\x0E\xE0\x86\xDC\xD8\ts\t\x8B\xDC\xAA\xCAS\xA9J-\xD8\x12\x02%{\xCB\\\xB2*\xEE#\x97\xA4\xBB\xC2\xE4\x8Ei\xD8\xD2jL\xDE\xFF\xC4\xD3\x10\xFB\x85r-\xA9\xEFl\xFF\xC9\xA0l\xB7\xBB;]\xEC\xBER\x89\x12\xBA\xAA\xC7\x97\x14\x9D~e\xFEG\xB3P\xCC\x9D\xE4iur\v\xBD\x00\xD9q\xECdL\x9E\x1C&\x98l\xE5\x9E\x7F;Nk\xA5\xEAh\xF3\xD3U~\xEDF\xC9\xDA\xDA\xF1G\av\xAA\x9F\x16\x85\xAF\x82\xFAj\x1F\xB8U\x91\xF4\x14\x12\xC8NS\xF1\xE3,G\x9A\xCBT=zd\x83\x18\xE1\xC7;\xC9[`jZ\x15\xE5\x96i,S\xCBlQ\x93>[H)\x17\n\x02\x84\xD9\x96\xF7\xDC\xB8\xEC\x8B\xC6\x19\x05\x18\x9D\x81\xEC\xF28fX\x8Ew\x02\xBE\xF0c\x9Eu\xE0\xDF\xF3\xC0$zp\x8F\xF3\f33\x19\xFEhy\x14\xE4\xA2\x9D\xA5\xA7\x95\xF8\x93\xC7Lt>\xF7\xF9\x0E\xD0\xD6ax\xF6%\x81\xD8\x90\xAB\xD0\xF1`Fea\x14.\xDEPH2\x81\"\xED\xA1\xA8\xBF\xFA X\x03" }
end
